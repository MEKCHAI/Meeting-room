from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.decorators import login_required
from .forms import BookingForm
from .models import Room, Booking
from datetime import date
import calendar
from collections import defaultdict
from django.contrib import messages
from django.db.models import Q
from .forms import RoomForm
from django.contrib.admin.views.decorators import staff_member_required
from .forms import CustomUserCreationForm  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
from django.urls import reverse_lazy
from django.views.generic import CreateView
from .forms import CustomUserCreationForm

from django.shortcuts import render, get_object_or_404
from .models import Room
from django.contrib.auth.models import User  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import User


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
def room_list(request):
    rooms = Room.objects.all()[:3]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏´‡πâ‡∏≠‡∏á
    return render(request, 'booking/room_list.html', {'rooms': rooms})

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
def room_detail(request, id):
    room = get_object_or_404(Room, id=id)  # ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ï‡∏£‡∏á
    return render(request, 'booking/room_detail.html', {'room': room})
def room_list(request):
    rooms = MeetingRoom.objects.all()
    return render(request, 'room_list.html', {'rooms': rooms})



class SignUpView(CreateView):
    model = User
    form_class = CustomUserCreationForm
    template_name = 'signup.html'  # ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    success_url = reverse_lazy('login')  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ login

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')  # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    else:
        form = CustomUserCreationForm()
    return render(request, 'registration/register.html', {'form': form})

@login_required
def cancel_booking(request, booking_id):
    booking = Booking.objects.get(id=booking_id, user=request.user)
    if request.method == 'POST':
        booking.delete()
        messages.success(request, "‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect('my_bookings')
    return redirect('my_bookings')

@staff_member_required
def add_room(request):
    if request.method == 'POST':
        form = RoomForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
            return redirect('room_list')
    else:
        form = RoomForm()
    return render(request, 'booking/room_form.html', {'form': form, 'title': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'})

@login_required
def edit_room(request, room_id):
    room = Room.objects.get(pk=room_id)
    if request.method == 'POST':
        form = RoomForm(request.POST, instance=room)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return redirect('room_list')
    else:
        form = RoomForm(instance=room)
    return render(request, 'booking/room_form.html', {'form': form, 'title': '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'})

@login_required
def delete_room(request, room_id):
    room = Room.objects.get(pk=room_id)
    room.delete()
    messages.success(request, "üóëÔ∏è ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect('room_list')

def calendar_grid_view(request, year, month):
    year = int(year)
    month = int(month)
    today = date.today()
    cal = calendar.Calendar(firstweekday=6)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    month_days = cal.monthdatescalendar(year, month)

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    bookings = Booking.objects.filter(date__year=year, date__month=month)

    # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
    bookings_by_day = defaultdict(list)
    for booking in bookings:
        bookings_by_day[booking.date.strftime('%Y-%m-%d')].append(booking)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    matrix = []
    week = []
    for day in cal.itermonthdates(year, month):
        if len(week) == 7:
            matrix.append(week)
            week = []
        week.append(day if day.month == month else None)
    if week:
        matrix.append(week)

    # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    return render(request, 'booking/calendar_grid.html', {
        'year': year,
        'month': month,
        'month_name': calendar.month_name[month],
        'calendar_matrix': matrix,
        'bookings_by_day': bookings_by_day,
        'prev_month': (month - 1) or 12,
        'prev_year': year - 1 if month == 1 else year,
        'next_month': (month % 12) + 1,
        'next_year': year + 1 if month == 12 else year,
        'today': today,
    })

def month_calendar(request, year, month):
    year = int(year)
    month = int(month)

    month_name = calendar.month_name[month]
    num_days = monthrange(year, month)[1]
    days = range(1, num_days + 1)

    bookings = Booking.objects.filter(date__year=year, date__month=month).select_related('room')
    
    bookings_by_day = defaultdict(list)
    for booking in bookings:
        bookings_by_day[booking.date.day].append(booking)

    return render(request, 'booking/month_calendar.html', {
        'year': year,
        'month': month,
        'month_name': month_name,
        'days': days,
        'bookings_by_day': dict(bookings_by_day),
    })

def room_list(request):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    rooms = Room.objects.all()

    # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
    room_to_update = Room.objects.get(id=1)  # ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ id = 1
    room_to_update.name = "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ä‡∏±‡πâ‡∏ô 1"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
    room_to_update.location = "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    room_to_update.save()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

     # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
    room_to_update = Room.objects.get(id=2)  # ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ id = 1
    room_to_update.name = "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ä‡∏±‡πâ‡∏ô 2"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
    room_to_update.location = "‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    room_to_update.save()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

     # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
    room_to_update = Room.objects.get(id=3)  # ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ id = 1
    room_to_update.name = "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ä‡∏±‡πâ‡∏ô 3"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
    room_to_update.location = "‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    room_to_update.save()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á





    return render(request, 'booking/room_list.html', {'rooms': rooms})

def calendar_view(request):
    today = date.today()
    year = today.year
    months = [(i, calendar.month_name[i]) for i in range(1, 13)]
    return render(request, 'booking/calendar.html', {'months': months, 'year': year})

@login_required
def book_room(request):
    if request.method == 'POST':
        if 'confirm' in request.POST:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            form = BookingForm(request.POST)
            if form.is_valid():
                booking = form.save(commit=False)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥
                conflict = Booking.objects.filter(
                    room=booking.room,
                    date=booking.date,
                    start_time__lt=booking.end_time,
                    end_time__gt=booking.start_time
                ).exists()

                if conflict:
                    messages.error(request, "‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô")
                    return redirect('book_room')  # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ redirect ‡∏Å‡∏•‡∏±‡∏ö form ‡∏Å‡πá‡πÑ‡∏î‡πâ

                booking.user = request.user
                booking.save()
                messages.success(request, "‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return redirect('calendar')
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚Üí ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            form = BookingForm(request.POST)
            if form.is_valid():
                booking_preview = form.save(commit=False)
                return render(request, 'booking/booking_confirm.html', {
                    'booking': booking_preview,
                    'form_data': request.POST  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ hidden field
                })
    else:
        selected_date = request.GET.get('date')
        form = BookingForm(initial={'date': selected_date} if selected_date else None)

    return render(request, 'booking/booking_form.html', {'form': form})

@login_required
def my_bookings(request):
    bookings = Booking.objects.filter(user=request.user).order_by('-date', 'start_time')
    return render(request, 'booking/my_bookings.html', {'bookings': bookings})

def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = UserCreationForm()
    return render(request, 'booking/register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('calendar')
    else:
        form = AuthenticationForm()
    return render(request, 'booking/login.html', {'form': form})

def logout_view(request):
    logout(request)
    return redirect('login')

def room_detail(request, id):
    room = Room.objects.get(id=id)
    return render(request, 'booking/room_detail.html', {'room': room})

